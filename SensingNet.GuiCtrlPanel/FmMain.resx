<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAEAAAABAAAAAQAAAAIAAAACAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAA
        AAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAACAAAAAQAA
        AAEAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAACAAAAAwAAAAQAAAAFAAAABQAAAAYAAAAGAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAFAAAABQAA
        AAQAAAADAAAAAgAAAAEAAAABAAAAAAAAAAAAAAACAAAAAwAAAAQAAAAFAAAABwAAAAgAAAAKAAAACgAA
        AAsAAAALAAAACwAAAAsAAAALAAAACwAAAAsAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAA
        AAkAAAAIAAAABgAAAAUAAAADAAAAAgAAAAEAAAABAAAAAAAAAAIAAAAEAAAABgAAAAgAAAALAAAADQAA
        AA8AAAAQAAAAEAAAABEAAAARAAAAEQAAABEAAAARAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAA
        ABAAAAAPAAAADgAAAAwAAAAKAAAACAAAAAUAAAADAAAAAgAAAAEAAAAAAAAAAwAAAAUAAAAIAAAADAAA
        AA8AAAASAAAAFQAAABYAAAAXAAAAFwAAABcAAAAXAAAAFwAAABcAAAAXAAAAFwAAABYAAAAWAAAAFgAA
        ABcAAAAXAAAAFgAAABYAAAAUAAAAEQAAAA4AAAALAAAABwAAAAUAAAADAAAAAQAAAAEAAAAEAAAABwAA
        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
        AAMAAAAHgAAAB4AAAA/AAAAP4AAAH/AAAD8=
</value>
  </data>
</root>